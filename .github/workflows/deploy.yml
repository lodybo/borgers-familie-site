name: üöÄ Deploy

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read
  packages: write

jobs:
  docker:
    name: üê≥ Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: ‚éî Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('package-lock.json') }}

      - name: üì• Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: üèóÔ∏è Build
        run: npm run build

      - name: üóëÔ∏è Prune dev dependencies
        run: npm prune --omit=dev

      - name: ‚öóÔ∏è Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: Login to GH Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          no-cache: true
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  deploy-prod:
    name: üöÄ Deploy to production
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚öóÔ∏è Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: ‚öóÔ∏è Determine environment
        id: env
        run: |
          if [[ "${{ steps.version.outputs.value }}" == *-beta* ]]; then
            echo "setting up for development"
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "cluster=spindraad-dev-cluster" >> $GITHUB_OUTPUT
          else
            echo "setting up for production"
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "cluster=spindraad-app-cluster" >> $GITHUB_OUTPUT
          fi

      - name: ‚öóÔ∏è Extract app name from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: appname
        with:
          cmd: "yq .app.name values.yaml"

      - name: ‚öóÔ∏è Extract namespace from values.yaml
        uses: mikefarah/yq@v4.44.2
        id: namespace
        with:
          cmd: "yq .app.namespace values.yaml"

      - name: üåä Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: üíæ Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ steps.env.outputs.cluster }}

      - name: ‚úèÔ∏è Update Helm Chart's appVersion
        run: sed -i "s/<VERSION>/${{ steps.version.outputs.value }}/g" Chart.yaml

      - name: üöÄ Deploy to cluster
        run: >
          helm upgrade --install
          $(echo ${{ steps.appname.outputs.result }}) .
          --set environment=$(echo ${{ steps.env.outputs.environment }})
          --set postgres.password=${{ secrets.POSTGRES_PASSWORD }}
          --set secrets.sessionSecret=${{ secrets.SESSION_SECRET }}
          --set secrets.sendgridApiKey=${{ secrets.SENDGRID_API_KEY }}
          --set secrets.csrfSecret=${{ secrets.CSRF_SECRET }}
          --set secrets.mollieApiKey=${{ steps.env.outputs.environment == 'production' && secrets.MOLLIE_API_KEY_PROD || secrets.MOLLIE_API_KEY_DEV }}
          --namespace=$(echo ${{ steps.namespace.outputs.result }})
          --create-namespace

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

enum PaymentStatus {
  OPEN
  CANCELED
  PENDING
  AUTHORIZED
  EXPIRED
  FAILED
  PAID
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Event {
  id          String @id @default(cuid())
  name        String
  description String
  slug        String @unique

  venue        String
  venueAddress String
  venueUrl     String

  date      DateTime
  doorsOpen DateTime

  price     Decimal @db.Money
  imagePath String?

  soldTickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id String @id @default(cuid())

  ticketNumber Int    @unique
  emailAddress String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShopItem {
  id String @id @default(cuid())

  name        String
  description String

  price      Decimal  @db.Money
  imagePaths String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(cuid())

  amount Decimal       @db.Money
  status PaymentStatus

  molliePaymentId String
  tickets         Ticket[]
  emailAddress    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
